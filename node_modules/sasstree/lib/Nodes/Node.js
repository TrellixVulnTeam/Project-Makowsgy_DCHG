"use strict";

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var clone = require("lodash").clone;

/**
 * @class Node
 *
 * This is the base class for all AST nodes.
 */

var Node = (function () {
    function Node(type, source) {
        _classCallCheck(this, Node);

        this.type = type;
        this.source = source;

        /**
         * Text content after the node, such as whitespace or semicolons.
         * @type {string}
         */
        this.after = "";
    }

    _createClass(Node, {
        before: {
            get: function () {
                if (this.previousNode) {
                    return this.previousNode.after;
                }

                return "";
            }
        },
        attachChild: {
            value: function attachChild(child) {
                if (!this.children) {
                    this.children = [];
                }

                this.children.push(child);
            }
        },
        walk: {
            value: function walk(callback) {
                callback(this);

                if (this.children && this.children.length) {
                    this.children.forEach(function (child) {
                        child.walk(callback);
                    });
                }
            }
        },
        find: {
            value: function find(nodeType) {
                var matches = [];

                this.walk(function (node) {
                    if (node.type === nodeType) matches.push(node);
                });

                return matches;
            }
        },
        toJSON: {
            value: function toJSON() {
                var copy = clone(this);
                var type = copy.type;

                delete copy.type;
                delete copy.source;
                delete copy.parent;

                return _defineProperty({}, type, copy);
            }
        }
    });

    return Node;
})();

module.exports = Node;