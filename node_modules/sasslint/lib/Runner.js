'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _sasstree = require('sasstree');

var _sasstree2 = _interopRequireDefault(_sasstree);

var _lodashCollectionForEach = require('lodash/collection/forEach');

var _lodashCollectionForEach2 = _interopRequireDefault(_lodashCollectionForEach);

/**
 * @class Runner
 *
 * The runner is responsible for taking files, requesting
 * the AST, and passing it to interested linters.
 */

var Runner = (function () {
    function Runner(config) {
        var _this = this;

        _classCallCheck(this, Runner);

        this.linters = [];

        // Initialize linters specified in the config
        if (config.rules) {
            (0, _lodashCollectionForEach2['default'])(config.rules, function (options, rule) {
                if (options.enabled) {
                    // Find the linter...
                    try {
                        var Linter = require('./Linters/' + rule);
                        var linter = new Linter(rule, options);
                        linter.initialize();

                        _this.linters.push(linter);
                    } catch (e) {
                        throw new Error('Cannot load linter "' + rule + '".');
                    }
                }
            });
        }
    }

    /**
     * Parse an array of tokens.
     * @param {string} scss
     * @param {object} options
     */

    _createClass(Runner, [{
        key: 'lint',
        value: function lint(scss) {
            var _this2 = this;

            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            if (options && options.bench) {
                console.time('SassTree');
            }

            // Get the AST for the given SCSS source
            var ast = _sasstree2['default'].parse(scss, { bench: options.bench });

            if (options && options.bench) {
                console.timeEnd('SassTree');
                console.time('lint');
            }

            var lints = [];

            ast.walk(function (node) {
                _this2.linters.forEach(function (linter) {
                    if (linter.isInterested(node)) {
                        linter.onLint = function (lint) {
                            lints.push(lint);
                        };

                        linter.run(node);
                    }
                });
            });

            if (options && options.bench) {
                console.timeEnd('lint');
            }

            return lints;
        }
    }]);

    return Runner;
})();

exports['default'] = Runner;
module.exports = exports['default'];