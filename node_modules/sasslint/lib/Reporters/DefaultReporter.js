'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _textTable = require('text-table');

var _textTable2 = _interopRequireDefault(_textTable);

/**
 * Format linting errors to be output to the console.
 */

var DefaultReporter = (function () {
    function DefaultReporter() {
        _classCallCheck(this, DefaultReporter);

        this.lints = [];
    }

    _createClass(DefaultReporter, [{
        key: 'report',
        value: function report(lints, file) {
            if (lints.length === 0) return;

            console.log(_chalk2['default'].underline(_path2['default'].basename(file) + ':'));

            var t = [];
            lints.forEach(function (lint) {
                var lineRef = _chalk2['default'].gray(lint.source.line + ':' + lint.source.column);
                var label = lint.severity === 'error' ? _chalk2['default'].bold.red('error') : _chalk2['default'].bold.yellow('warning');
                var linter = _chalk2['default'].gray(lint.linter);

                t.push([lineRef, label, lint.error, linter]);
            });

            // Track lints for later summary.
            this.lints = this.lints.concat(lints);

            console.log((0, _textTable2['default'])(t));
        }
    }, {
        key: 'summarize',
        value: function summarize() {
            var errors = this.lints.filter(function (lint) {
                return lint.severity === 'error';
            });
            var warnings = this.lints.filter(function (lint) {
                return lint.severity === 'warning';
            });

            var footer = '\n';
            if (this.lints.length) {
                footer += _chalk2['default'].red.bold('✖ ') + errors.length + ' errors';
            } else {
                footer += _chalk2['default'].green.bold('✓ ') + 'No errors';
            }

            if (warnings.length) {
                footer += ', ' + warnings.length + ' warnings';
            }

            console.log(footer);
        }
    }]);

    return DefaultReporter;
})();

exports['default'] = DefaultReporter;
module.exports = exports['default'];