'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Linter2 = require('./Linter');

var _Linter3 = _interopRequireDefault(_Linter2);

/**
 * @class SpaceAfterPropertyColon
 *
 * Properties should be formatted with a single space separating
 * the colon from the property's value.
 */

var SpaceAfterPropertyColon = (function (_Linter) {
    _inherits(SpaceAfterPropertyColon, _Linter);

    function SpaceAfterPropertyColon() {
        _classCallCheck(this, SpaceAfterPropertyColon);

        _get(Object.getPrototypeOf(SpaceAfterPropertyColon.prototype), 'constructor', this).apply(this, arguments);

        this.nodeTypes = ['Declaration'];
        this.defaults = {
            severity: 'warning',
            style: 'one_space'
        };
    }

    _createClass(SpaceAfterPropertyColon, [{
        key: 'run',
        value: function run(node, lint) {
            var whitespaceChars = 0;
            for (var i = 0; i < node.value.length; i++) {
                if (node.value[i] === ' ') {
                    whitespaceChars++;
                } else {
                    break;
                }
            }

            // @TODO: For full scss-lint compatibility, need "one_space_or_newline" and "aligned" options
            switch (this.options.style) {
                // There should be zero spaces between the colon & property value.
                case 'no_space':
                    if (whitespaceChars !== 0) this.error(node, 'Colon after property should be followed by no spaces.');
                    break;

                // There should be exactly one space between the colon & property value.
                case 'one_space':
                    if (whitespaceChars !== 1) this.error(node, 'Colon after property should be followed by one space.');
                    break;

                case 'at_least_one_space':
                    if (whitespaceChars < 1) this.error(node, 'Colon after property should be followed by at least one space.');
                    break;

                default:
                    lint(this.error(null, 'Invalid option given for \'style\'.'));
            }

            return null;
        }
    }]);

    return SpaceAfterPropertyColon;
})(_Linter3['default']);

exports['default'] = SpaceAfterPropertyColon;
module.exports = exports['default'];

/**
 * Types of nodes that this linter is interested in.
 * @see https://github.com/DFurnes/sasstree/tree/master/src/Nodes
 * @type {Array}
 */

/**
 * Default options.
 * @type {object}
 */