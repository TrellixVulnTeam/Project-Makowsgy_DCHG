'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _lodashObjectDefaults = require('lodash/object/defaults');

var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

/**
 * @class Linter
 *
 * This is the base class for all linters.
 */

var Linter = (function () {
    function Linter(name) {
        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, Linter);

        this.nodeTypes = [];
        this.defaults = {};

        this.name = name;
        this.options = options;
        this.onLint = function (lint) {/* ... */};
    }

    _createClass(Linter, [{
        key: 'initialize',
        value: function initialize() {
            this.options = (0, _lodashObjectDefaults2['default'])(this.options, this.defaults);
        }
    }, {
        key: 'isInterested',
        value: function isInterested(node) {
            return this.nodeTypes.some(function (nodeType) {
                return nodeType === node.type;
            });
        }
    }, {
        key: 'run',
        value: function run(node) {

            // ...

        }
    }, {
        key: 'error',
        value: function error(node, message) {
            this.onLint({
                error: message,
                severity: this.options.severity,
                linter: this.name,
                source: node ? node.source : { line: 0, column: 0 }
            });
        }
    }]);

    return Linter;
})();

exports['default'] = Linter;
module.exports = exports['default'];

/**
 * Types of nodes that this linter is interested in.
 * @see https://github.com/DFurnes/sasstree/tree/master/src/Nodes
 * @type {Array}
 */

/**
 * Default options.
 * @type {object}
 */