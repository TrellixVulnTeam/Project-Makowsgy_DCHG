'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _Linter2 = require('./Linter');

var _Linter3 = _interopRequireDefault(_Linter2);

var _lodashCollectionIncludes = require('lodash/collection/includes');

var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

var STOPPING_CHARACTERS = ['!', '\'', '"'];

/**
 * @class BangFormat
 *
 * Check spacing of ! declarations, like !important and !default
 */

var BangFormat = (function (_Linter) {
    _inherits(BangFormat, _Linter);

    function BangFormat() {
        _classCallCheck(this, BangFormat);

        _get(Object.getPrototypeOf(BangFormat.prototype), 'constructor', this).apply(this, arguments);

        this.nodeTypes = ['Declaration'];
        this.defaults = {
            severity: 'warning',
            space_before_bang: true,
            space_after_bang: false
        };
    }

    _createClass(BangFormat, [{
        key: 'run',
        value: function run(node) {
            var offset = BangFormat.findBangOffset(node);
            if (node.value[offset] !== '!') return;

            this.checkBeforeBang(node, offset);
            this.checkAfterBang(node, offset);
        }
    }, {
        key: 'checkBeforeBang',
        value: function checkBeforeBang(node, offset) {
            var expected = this.options.space_before_bang ? / / : /[^ ]/;

            var charBeforeBang = node.value[offset - 1];

            //console.log('b char: "' + charBeforeBang + '"... should be a space? "' + this.options.space_before_bang + '".');
            if (!charBeforeBang.match(expected)) {
                this.error(node, '! ' + (this.options.space_before_bang ? 'should' : 'should not') + ' be preceded by a space.');
            }
        }
    }, {
        key: 'checkAfterBang',
        value: function checkAfterBang(node, offset) {
            var expected = this.options.space_after_bang ? / / : /[^ ]/;

            var charAfterBang = node.value[offset + 1];

            //console.log('a char: "' + charAfterBang + '"... should be a space? "' + this.options.space_after_bang + '".');
            if (!charAfterBang.match(expected)) {
                this.error(node, '! ' + (this.options.space_after_bang ? 'should' : 'should not') + ' be followed by a space.');
            }
        }
    }], [{
        key: 'findBangOffset',
        value: function findBangOffset(node) {
            var offset = node.value.length;

            do {
                offset--;
            } while (!(0, _lodashCollectionIncludes2['default'])(STOPPING_CHARACTERS, node.value[offset]) && offset > 0);

            return offset;
        }
    }]);

    return BangFormat;
})(_Linter3['default']);

exports['default'] = BangFormat;
module.exports = exports['default'];

/**
 * Types of nodes that this linter is interested in.
 * @see https://github.com/DFurnes/sasstree/tree/master/src/Nodes
 * @type {Array}
 */

/**
 * Default options.
 * @type {object}
 */